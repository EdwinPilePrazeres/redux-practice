{"version":3,"sources":["components/Person/Person.module.css","components/AddPerson/AddPerson.module.css","components/Person/Person.js","components/AddPerson/AddPerson.js","store/actions.js","containers/Persons.js","App.js","registerServiceWorker.js","store/reducer.js","index.js"],"names":["module","exports","person","props","className","classes","Person","onClick","clicked","name","age","AddPerson","state","nameChangedHandler","event","setState","target","value","ageChangedHandler","type","placeholder","onChange","this","personAdded","Component","ADD_PERSON","REMOVE_PERSON","Persons","onAddedPerson","prs","map","onRemovedPerson","id","connect","persons","dispatch","actionTypes","personData","personId","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","reducer","action","newPerson","Math","random","concat","filter","store","createStore","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.927b6f12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__2DBHz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddPerson\":\"AddPerson_AddPerson__3azRR\"};","import React from 'react';\r\n\r\nimport classes from './Person.module.css';\r\n\r\nconst person = (props) => (\r\n    <div className={classes.Person} onClick={props.clicked}>\r\n        <h1>{props.name}</h1>\r\n        <p>Age: {props.age}</p>\r\n    </div>\r\n);\r\n\r\nexport default person;","import { render } from '@testing-library/react';\r\nimport React, { Component } from 'react';\r\n\r\nimport classes from './AddPerson.module.css';\r\n\r\nclass AddPerson extends Component {\r\n    state = {\r\n        name: '',\r\n        age: '',\r\n    }\r\n\r\n    nameChangedHandler = (event) => {\r\n        this.setState({name: event.target.value});\r\n    }\r\n\r\n    ageChangedHandler = (event) => {\r\n        this.setState({age: event.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.AddPerson}>\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    onChange={this.nameChangedHandler}\r\n                    value={this.state.name} />\r\n                <input \r\n                    type=\"number\"\r\n                    placeholder=\"Age\"\r\n                    onChange={this.ageChangedHandler}\r\n                    value={this.state.age} />\r\n\r\n                <button onClick={() => this.props.personAdded(this.state.name, this.state.age)}>Add Person</button>\r\n            </div>\r\n        )\r\n    }\r\n} \r\nexport default AddPerson;","export const ADD_PERSON = 'ADD_PERSON';\r\nexport const REMOVE_PERSON = 'REMOVE_PERSON';\r\n","import React, { Component } from 'react';\r\n\r\nimport Person from '../components/Person/Person';\r\nimport AddPerson from '../components/AddPerson/AddPerson';\r\nimport * as actionTypes from '../store/actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Persons extends Component {\r\n\r\n\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <AddPerson personAdded={this.props.onAddedPerson} />\r\n                {this.props.prs.map(person => (\r\n                    <Person \r\n                        key={person.id}\r\n                        name={person.name} \r\n                        age={person.age} \r\n                        clicked={() => this.props.onRemovedPerson(person.id)}/>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        prs: state.persons\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps =  dispatch => {\r\n    return {\r\n        onAddedPerson: (name, age) => dispatch({type: actionTypes.ADD_PERSON, personData: {name: name, age: age}}),\r\n        onRemovedPerson: (id) => dispatch({type: actionTypes.REMOVE_PERSON, personId: id}),\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Persons);","import React, { Component } from 'react';\n\nimport Persons from './containers/Persons';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ol>\n          <li>Turn this app into one which does NOT use local state (in components) but instead uses Redux</li>\n        </ol>\n        <Persons />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from './actions';\r\n\r\nconst initialState = {\r\n    persons: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_PERSON:\r\n            const newPerson = {\r\n                id: Math.random(), // not really unique but good enough here!\r\n                name: action.personData.name,\r\n                // age: Math.floor( Math.random() * 40 )\r\n                age: action.personData.age,\r\n            }\r\n            return {\r\n                ...state,\r\n                persons: state.persons.concat(newPerson)\r\n            }\r\n        case actionTypes.REMOVE_PERSON:\r\n            return {\r\n                ...state,\r\n                persons: state.persons.filter(person => person.id !== action.personId)\r\n            }\r\n        \r\n    }\r\n    return state;\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\n\n\nReactDOM.render(<Provider store={store} ><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}